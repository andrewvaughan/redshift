# This rule file is driven by ESLint rules, which are defined here:
# {@link http://eslint.org/docs/user-guide/configuring}
#
# Last updated 2017-03-08 with ESLint v3.17.1
#
# Do not edit this file!  Extends this in your own .eslintrc.yml
---
    extends : eslint:recommended
    root    : true

    parserOptions:
        emcaVersion : 8
        sourceType  : module

    env:
        amd   : true
        es6   : true
        mocha : true
        node  : true

    globals:
        should : true

    rules:

        # Possible Errors (http://eslint.org/docs/rules/#possible-errors)
        no-extra-parens   : "error"  # Disallow unnecessary parentheses

        # JSDoc Options
        valid-jsdoc: ["error", { "requireReturn" : false, "prefer": { "return" : "returns" }, "preferType": { "String" : "string", "Object" : "object" } }]

        # Best Practices (http://eslint.org/docs/rules/#best-practices)
        accessor-pairs        : "error"  # Enforce getter and setter pairs in objects
        array-callback-return : "error"  # Enforce return statements in callbacks of array methods
        block-scoped-var      : "error"  # Enforce the use of variables within the scope they are defined
        complexity            : ["error", 20]
        consistent-return     : "error"  # Require return statements to either always or never specify values
        curly                 : "error"  # Enforce consistent brace style for all control statements
        default-case          : "error"  # Require default cases in switch statements
        dot-location          : ["error", "property"]  # Enforce consistent newlines before and after dots
        dot-notation          : "error"  # Enforce dot notation whenever possible
        eqeqeq                : "error"  # Require the use of === and !==
        guard-for-in          : "error"  # Require for-in loops to include an if statement
        no-alert              : "error"  # Disallow the use of alert, confirm, and prompt
        no-caller             : "error"  # Disallow the use of arguments.caller or arguments.callee
        no-div-regex          : "error"  # Disallow division operators explicitly at the beginning of regular expressions
        no-else-return        : "error"  # Disallow else blocks after return statements in if statements
        no-empty-function     : "error"  # Disallow empty functions
        no-eq-null            : "error"  # Disallow null comparisons without type-checking operators
        no-eval               : "error"  # Disallow the use of eval()
        no-extend-native      : "error"  # Disallow extending native types
        no-extra-bind         : "error"  # Disallow unnecessary calls to .bind()
        no-extra-label        : "error"  # Disallow unnecessary labels
        no-floating-decimal   : "error"  # Disallow leading or trailing decimal points in numeric literals
        no-implicit-coercion  : "error"  # Disallow shorthand type conversions
        no-implicit-globals   : "error"  # Disallow var and named function declarations in the global scope
        no-implied-eval       : "error"  # Disallow the use of eval()-like methods
        no-invalid-this       : "error"  # Disallow this keywords outside of classes or class-like objects
        no-iterator           : "error"  # Disallow the use of the __iterator__ property
        no-labels             : "error"  # Disallow labeled statements
        no-lone-blocks        : "error"  # Disallow unnecessary nested blocks
        no-loop-func          : "error"  # Disallow function declarations and expressions inside loop statements
        no-magic-numbers      : "error"  # Disallow magic numbers
        no-multi-str          : "error"  # Disallow multiline strings
        no-native-reassign    : "error"  # Disallow reassigning native objects
        no-new                : "error"  # Disallow new operators outside of assignments or comparisons
        no-new-func           : "error"  # Disallow new operators with the Function object
        no-new-wrappers       : "error"  # Disallow new operators with the String, Number, and Boolean objects
        no-octal-escape       : "error"  # Disallow octal escape sequences in string literals
        no-param-reassign     : "error"  # Disallow reassigning function parameters
        no-proto              : "error"  # Disallow the use of the __proto__ property
        no-return-assign      : "error"  # Disallow assignment operators in return statements
        no-script-url         : "error"  # Disallow javascript: urls
        no-self-compare       : "error"  # Disallow comparisons where both sides are exactly the same
        no-sequences          : "error"  # Disallow comma operators
        no-throw-literal      : "error"  # Disallow throwing literals as exceptions
        no-unmodified-loop-condition : "error"  # Disallow unmodified loop conditions
        no-unused-expressions : "error"  # Disallow unused expressions
        no-useless-call       : "error"  # Disallow unnecessary calls to .call() and .apply()
        no-useless-concat     : "error"  # Disallow unnecessary concatenation of literals or template literals
        no-useless-escape     : "error"  # Disallow unnecessary escape characters
        no-void               : "error"  # Disallow void operators
        no-warning-comments   : "error"  # Disallow specified warning terms in comments
        no-with               : "error"  # Disallow with statements
        radix                 : "error"  # Enforce the consistent use of the radix argument when using parseInt()
        vars-on-top           : "error"  # Require var declarations be placed at the top of their containing scope
        wrap-iife             : "error"  # Require parentheses around immediate function invocations
        yoda                  : "error"  # Require or disallow “Yoda” conditions

        # Variables (http://eslint.org/docs/rules/#variables)
        init-declarations          : "error"  # Require or disallow initialization in var declarations
        no-catch-shadow            : "error"  # Disallow catch clause prams from shadowing vars in the outer scope
        no-label-var               : "error"  # Disallow labels that share a name with a variable
        no-restricted-globals      : "error"  # Disallow specified global variables
        no-shadow                  : "error"  # Disallow var declarations from shadowing variables in the outer scope
        no-shadow-restricted-names : "error"  # Disallow identifiers from shadowing restricted names
        no-undef-init              : "error"  # Disallow initializing variables to undefined
        no-undefined               : "error"  # Disallow the use of undefined as an identifier
        no-use-before-define       : "error"  # Disallow the use of variables before they are defined

        # Node.js and Common.js (http://eslint.org/docs/rules/#nodejs-and-commonjs)
        callback-return       : 0        # Require return statements after callbacks
        global-require        : "error"  # Require require() calls to be placed at top-level module scope
        handle-callback-err   : "error"  # Require error handling in callbacks
        no-mixed-requires     : "error"  # Disallow require calls to be mixed with regular var declarations
        no-new-require        : "error"  # Disallow new operators with calls to require
        no-path-concat        : "error"  # Disallow string concatenation with __dirname and __filename
        no-process-env        : "error"  # Disallow the use of process.env
        no-process-exit       : "error"  # Disallow the use of process.exit()
        no-restricted-modules : "error"  # Disallow specified modules when loaded by require
        no-sync               : "error"  # Disallow synchronous methods

        # Stylistic Issues (http://eslint.org/docs/rules/#stylistic-issues)
        array-bracket-spacing         : "error"  # Enforce consistent spacing inside array brackets
        block-spacing                 : "error"  # Enforce consistent spacing inside single-line blocks
        brace-style                   : "error"  # Enforce consistent brace style for blocks
        camelcase                     : "error"  # Enforce camelcase naming convention
        comma-spacing                 : "error"  # Enforce consistent spacing before and after commas
        comma-style                   : "error"  # Enforce consistent comma style
        computed-property-spacing     : "error"  # Enforce consistent spacing inside computed property brackets
        consistent-this               : ["error", "self"]  # Enforce consistent naming when capturing the current execution context
        eol-last                      : "error"  # Enforce at least one newline at the end of files
        func-names                    : "error"  # Enforce named function expressions
        func-style                    : "error"  # Enforce the consistent use of either function declarations or expressions
        id-blacklist                  : "error"  # Disallow specified identifiers
        id-length                     : "error"  # Enforce minimum and maximum identifier lengths
        id-match                      : "error"  # Require identifiers to match a specified regular expression
        indent                        : ["error", 4, { "SwitchCase": 1 }]
        jsx-quotes                    : "error"  # Enforce the consistent use of either double or single quotes in JSX attributes
        key-spacing                   : ["error", { "align" : "colon", "beforeColon": true }]  # Enforce consistent spacing between keys and values in object literal properties
        keyword-spacing               : "error"  # Enforce consistent spacing before and after keywords
        linebreak-style               : "error"  # Enforce consistent linebreak style
        lines-around-comment          : "error"  # Require empty lines around comments
        max-depth                     : "error"  # Enforce a maximum depth that blocks can be nested
        max-len                       : ["error", 118]  # Enforce a maximum line length (118 is GitHub preview width)
        max-nested-callbacks          : "error"  # Enforce a maximum depth that callbacks can be nested
        max-params                    : "error"  # Enforce a maximum number of parameters in function definitions
        max-statements                : ["error", 15]  # Enforce a maximum number of statements allowed in function blocks
        max-statements-per-line       : "error"  # Enforce a maximum number of statements allowed per line
        new-cap                       : "error"  # Require constructor function names to begin with a capital letter
        new-parens                    : "error"  # Require parentheses when invoking a constructor with no arguments
        newline-after-var             : "error"  # Require or disallow an empty line after var declarations
        newline-before-return         : "error"  # Require an empty line before return statements
        newline-per-chained-call      : "error"  # Require a newline after each call in a method chain
        no-array-constructor          : "error"  # Disallow Array constructors
        no-bitwise                    : "error"  # Disallow bitwise operators
        no-continue                   : "error"  # Disallow continue statements
        no-inline-comments            : "error"  # Disallow inline comments after code
        no-lonely-if                  : "error"  # Disallow if statements as the only statement in else blocks
        no-mixed-spaces-and-tabs      : "error"  # Disallow mixed spaces and tabs for indentation
        no-multiple-empty-lines       : "error"  # Disallow multiple empty lines
        no-negated-condition          : "error"  # Disallow negated conditions
        no-nested-ternary             : "error"  # Disallow nested ternary expressions
        no-new-object                 : "error"  # Disallow Object constructors
        no-plusplus                   : "error"  # Disallow the unary operators ++ and --
        no-restricted-syntax          : "error"  # Disallow specified syntax
        no-spaced-func                : "error"  # Disallow spacing between function identifiers and their applications
        no-ternary                    : "error"  # Disallow ternary operators
        no-trailing-spaces            : "error"  # Disallow trailing whitespace at the end of lines
        no-underscore-dangle          : "error"  # Disallow dangling underscores in identifiers
        no-unneeded-ternary           : "error"  # Disallow ternary operators when simpler alternatives exist
        no-whitespace-before-property : "error"  # Disallow whitespace before properties
        object-curly-spacing          : "error"  # Enforce consistent spacing inside braces
        object-property-newline       : "error"  # Enforce placing object properties on separate lines
        #one-var                       : "error"  # Enforce variables to be declared either together or separately in functions
        one-var-declaration-per-line  : "error"  # Require or disallow newlines around var declarations
        operator-assignment           : "error"  # Require or disallow assignment operator shorthand where possible
        operator-linebreak            : "error"  # Enforce consistent linebreak style for operators
        padded-blocks                 : "error"  # Require or disallow padding within blocks
        quote-props                   : ["error", "as-needed"]  # Require quotes around object literal property names
        quotes                        : ["error", "single"]  # Enforce the consistent use of either backticks, double, or single quotes
        require-jsdoc                 : "error"  # Require JSDoc comments
        semi                          : "error"  # Require or disallow semicolons instead of ASI
        semi-spacing                  : "error"  # Enforce consistent spacing before and after semicolons
        sort-vars                     : "error"  # Require variables within the same declaration block to be sorted
        space-before-blocks           : "error"  # Enforce consistent spacing before blocks
        space-before-function-paren   : ["error", "never"]  # Enforce consistent spacing before function definition opening parenthesis
        space-in-parens               : "error"  # Enforce consistent spacing inside parentheses
        space-infix-ops               : "error"  # Require spacing around operators
        space-unary-ops               : "error"  # Enforce consistent spacing before or after unary operators
        spaced-comment                : "error"  # Enforce consistent spacing after the // or /* in a comment
        wrap-regex                    : "error"  # Require parenthesis around regex literals

        # ES6 (http://eslint.org/docs/rules/#ecmascript-6)
        arrow-body-style        : "error"  # Require braces around arrow function bodies
        arrow-parens            : "error"  # Require parentheses around arrow function arguments
        arrow-spacing           : "error"  # Enforce consistent spacing before and after the arrow in arrow functions
        generator-star-spacing  : "error"  # Enforce consistent spacing around * operators in generator functions
        no-confusing-arrow      : "error"  # Disallow arrow functions where they could be confused with comparisons
        no-duplicate-imports    : "error"  # Disallow duplicate module imports
        no-restricted-imports   : "error"  # Disallow specified modules when loaded by import
        no-useless-computed-key : "error"  # Disallow unnecessary computed property keys in object literals
        no-useless-constructor  : "error"  # Disallow unnecessary constructors
        no-var                  : "error"  # Require let or const instead of var
        object-shorthand        : "error"  # Require or disallow method and property shorthand syntax for object literals
        prefer-arrow-callback   : ["error", { "allowNamedFunctions": true } ]  # Require arrow functions as callbacks
        prefer-const            : "error"  # Require const declarations for variables that are never reassigned after declared
        prefer-reflect          : "error"  # Require Reflect methods where applicable
        prefer-rest-params      : "error"  # Require rest parameters instead of arguments
        prefer-spread           : "error"  # Require spread operators instead of .apply()
        prefer-template         : "error"  # Require template literals instead of string concatenation
        require-yield           : "error"  # Require generator functions to contain yield
        sort-imports            : "error"  # Enforce sorted import declarations within modules
        template-curly-spacing  : "error"  # Require or disallow spacing around embedded expressions of template strings
        yield-star-spacing      : "error"  # Require or disallow spacing around the * in yield* expressions
